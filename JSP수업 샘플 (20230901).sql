CREATE TABLE MEMBERS(
     MNO NUMBER NOT NULL,
     EMAIL VARCHAR2(40) NOT NULL,
     PWD VARCHAR2(100) NOT NULL,
     MNAME VARCHAR2(50) NOT NULL,
     CRE_DATE DATE NOT NULL,
     MOD_DATE DATE NOT NULL
);

COMMENT ON TABLE MEMBERS IS '회원기본정보';

COMMENT ON COLUMN MEMBERS.MNO IS '회원정보';
COMMENT ON COLUMN MEMBERS.EMAIL IS '이메일';
COMMENT ON COLUMN MEMBERS.PWD IS '암호';
COMMENT ON COLUMN MEMBERS.MNAME IS '이름';
COMMENT ON COLUMN MEMBERS.CRE_DATE IS '가입일';
COMMENT ON COLUMN MEMBERS.MOD_DATE IS '마지막암호변경일';

ALTER TABLE MEMBERS
ADD CONSTRAINT MEMBERS_MNO_PK PRIMARY KEY(MNO);

ALTER TABLE MEMBERS
ADD CONSTRAINT MEMBERS_EMAIL_UK UNIQUE(EMAIL);

CREATE SEQUENCE MEMBERS_MNO_SEQ
INCREMENT BY 1
START WITH 1;

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's1@test.com', '1111', '홍길동', SYSDATE, SYSDATE);

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's2@test.com', '1111', '임꺽정', SYSDATE, SYSDATE);

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's3@test.com', '1111', '일지매', SYSDATE, SYSDATE);

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's4@test.com', '1111', '이몽룡', SYSDATE, SYSDATE);

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's5@test.com', '1111', '성춘향', SYSDATE, SYSDATE);

SELECT *
FROM MEMBERS;

COMMIT;


--회원 테이블

--모든 회원 목록을 조회하시오
DESC MEMBERS;

SELECT MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE
FROM MEMBERS;

SELECT MNO, MNAME, EMAIL, CRE_DATE
FROM MEMBERS;

SELECT MNO, MNAME, EMAIL, CRE_DATE
FROM MEMBERS;

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's6@test.com', '1111', '이순신', SYSDATE, SYSDATE);

COMMIT;

SELECT *
FROM MEMBERS
ORDER BY MNO DESC;

--회원 한 명 추가 문법 완성하기
DESC MEMBERS;

INSERT INTO MEMBERS
VALUE(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
VALUES(MEMBERS_MNO_SEQ.NEXTVAL, 's8@test.com', '1111', '고길동', SYSDATE, SYSDATE);

SELECT *
FROM MEMBERS;

COMMIT;


SELECT EMAIL, PWD
FROM MEMBERS
WHERE EMAIL = 's1@test.com'
AND PWD = 1111;



--전체
SELECT ROWNUM, MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE
FROM MEMBER;

--5명
SELECT ROWNUM, MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE
FROM MEMBER 
WHERE ROWNUM >= 1
AND ROWNUM <= 5;

--0명?
SELECT ROWNUM, MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE
FROM MEMBER 
WHERE ROWNUM >= 6
AND ROWNUM <= 10;



--인라인뷰!!!
SELECT ROWNUM AS RNUM, M.MNO, M.MNAME, M.EMAIL, M.CRE_DATE
FROM (  SELECT MNO, MNAME, EMAIL, CRE_DATE
            FROM MEMBER
            ORDER BY CRE_DATE DESC) M;

SELECT MEMBER.MNO, MNAME, EMAIL, CRE_DATE
FROM(   SELECT ROWNUM AS RNUM, M.MNO, M.MNAME, M.EMAIL, M.CRE_DATE
            FROM (  SELECT MNO, MNAME, EMAIL, CRE_DATE
            FROM MEMBER
            ORDER BY CRE_DATE DESC) M
) MEMBER
WHERE MEMBER.RNUM BETWEEN 1 AND 5;


SELECT COUNT(*)
FROM MEMBER;


--DB 구조

--정규화?????

--데이터베이스 정규화(Nomalization)
--데이터베이스 정규화란?
--데이터베이스의 설계를 재구성하는 것
--불필요한 데이터를 줄이고 삽입/갱신/삭제 시 발생할 수 있는 각종 이상 현상들을
--방지하기 위한 것
--릴레이션 분리, 삽입, 삭제, 갱신 이상의 발생 가능성을 줄이는 것

--@정규화의 주 목적
--1. 불필요한 데이터를 제거
--2. 데이터 저장을 논리적으로 한다

--@이상(abnormal)현상의 기본개념
--1. 갱신(update) 이상: 반복된 데이터 중에 일부만 수정하면 데이터의 불일치가 발생
--2. 삽입(insert) 이상: 불필요한 정보를 함께 저장하지 않고는 어떤 정보를 저장하는 것이 불가능
--3. 삭제(delete) 이상: 유용한 정보를 함께 삭제하지 않고는 어떤 정보를 삭제하는 것이 불가능

--@제1정규화
--반복되는 속성을 제거한 뒤 모든 속성이 원자 도메인 만으로 되어있는 정규형
--중복 제거

--@제2정규화
--제1정규형을 만족하고, 부분함수적 종속을 제거하여 완전 함수 종속을 만족

DROP TABLE LICTABLE;
CREATE TABLE LICTABLE(
    STU_NO NUMBER,
    NAME VARCHAR2(20),
    ADDR VARCHAR2(50),
    TEL VARCHAR2(14),
    LIC VARCHAR2(30),
    LIC_NO NUMBER(5),
    GETDATE VARCHAR2(12)
);

COMMENT ON TABLE LICTABLE IS '자격증보유 테이블';
COMMENT ON COLUMN LICTABLE.STU_NO IS '학생번호';
COMMENT ON COLUMN LICTABLE.NAME IS '이름';
COMMENT ON COLUMN LICTABLE.ADDR IS '주소';
COMMENT ON COLUMN LICTABLE.TEL IS '핸드폰번호';
COMMENT ON COLUMN LICTABLE.LIC IS '자격증';
COMMENT ON COLUMN LICTABLE.LIC_NO IS '자격증번호';
COMMENT ON COLUMN LICTABLE.GETDATE IS '취득일';

INSERT INTO LICTABLE
VALUE(STU_NO, NAME, ADDR, TEL, LIC, LIC_NO, GETDATE)
VALUES(1, '김개똥', '하와이', '010-999-9999', '정보처리', 12345, '대4');

INSERT INTO LICTABLE
VALUES(1, '김개똥', '하와이', '010-999-9999', '워드1급', 23456, '고2');

INSERT INTO LICTABLE
VALUES(1, '김개똥', '하와이', '010-999-9999', 'SQLD', 34567, '고3');

INSERT INTO LICTABLE
VALUES(1, '김개똥', '하와이', '010-999-9999', 'TOEIC', 45678, '고3');

SELECT *
FROM lictable;

UPDATE LICTABLE
SET ADDR = '서울'
WHERE NAME = '김개똥';

INSERT INTO LICTABLE
VALUE(STU_NO, NAME, ADDR, TEL, LIC, LIC_NO, GETDATE)
VALUES(2, '홍길동', '경기도', '010-888-8888', '컴활3급', 56789, '고2');

SELECT *
FROM lictable;

UPDATE LICTABLE
SET LIC = NULL, LIC_NO = NULL
WHERE LIC = '컴활3급';

INSERT INTO LICTABLE
VALUE(STU_NO, NAME, ADDR, TEL, LIC, LIC_NO, GETDATE)
VALUES(3, '김개똥', '인천', '02-1234-1244', '정보처리', 12345, '대1');

SELECT *
FROM lictable;

UPDATE LICTABLE
SET LIC = '정보처리(정보처리기사 변경)'
WHERE LIC = '정보처리기사';

ALTER TABLE LICTABLE MODIFY(LIC VARCHAR2(50)); --컬럼 사이즈 변경

SELECT *
FROM lictable
WHERE LIC_NO = 12345;

SELECT *
FROM lictable
WHERE LIC LIKE '정보처리%';

--SUBSTR (COL, 부터, 자리)
SELECT STU_NO, NAME, ADDR, TEL, 
    CASE WHEN LIC LIKE '정보처리%' THEN '정보처리기사' ELSE LIC END LIC,
    LIC_NO, GETDATE
FROM LICTABLE;

SELECT STU_NO, NAME, ADDR, TEL, 
    DECODE(LIC, '정보처리(정보처리기사 변경)', '정보처리기사', LIC) LIC,
    LIC_NO, GETDATE
FROM LICTABLE;

UPDATE LICTABLE
SET LIC = '정보처리기사'
WHERE LIC = '정보처리(정보처리기사 변경)';

4SELECT *
FROM lictable;

UPDATE LICTABLE
SET ADDR = '하와이'
WHERE STU_NO = 1;

UPDATE LICTABLE
SET ADDR = '서울'
WHERE LIC = 'SQLD' AND NAME = '김개똥';

COMMIT;

------------------------------------------------------------------------
SELECT *
FROM Curriculum;
CREATE TABLE Curriculum(
    CODE VARCHAR2(5),
    COURSE_NAME VARCHAR2(100),
    period NUMBER(3),
    LECTURE_TIME NUMBER(3),
    TUITION_FEE NUMBER(8),
    BOOK VARCHAR2(100)
);

COMMENT ON TABLE Curriculum IS '교육과정관련 테이블';
COMMENT ON COLUMN Curriculum.CODE IS '과정코드';
COMMENT ON COLUMN Curriculum.COURSE_NAME IS '과정명';
COMMENT ON COLUMN Curriculum.period IS '교육기간';
COMMENT ON COLUMN Curriculum.LECTURE_TIME IS '강의시간';
COMMENT ON COLUMN Curriculum.TUITION_FEE IS '수강료';
COMMENT ON COLUMN Curriculum.BOOK IS '교재';

INSERT INTO Curriculum
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK)
VALUES('a', '국영수단기마스터', 2, 3, 500000, '국어, 영어, 수학');

INSERT INTO Curriculum
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK)
VALUES('b', 'IT완전정복', 3, 3, 480000, 'C, Python, Java');

UPDATE curriculum
SET BOOK = BOOK || ', 국사'
WHERE COURSE_NAME = '국영수단기마스터';

UPDATE curriculum
SET BOOK = REPLACE(BOOK, 'Java', 'Javascript')
WHERE COURSE_NAME = 'IT완전정복';

UPDATE curriculum
SET BOOK = REPLACE(BOOK, '영어', '회화')
WHERE COURSE_NAME = '국영수단기마스터';

UPDATE curriculum
SET BOOK = REPLACE(BOOK, 'Python', 'Py')
WHERE COURSE_NAME = 'IT완전정복';

INSERT INTO Curriculum
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK)
VALUES('c', '국영수단기마스터-B', 5, 8, 660000, '국어, 회화, 수학, 국사');

UPDATE curriculum
SET BOOK = REPLACE(BOOK, '수학, ', '')
WHERE COURSE_NAME = '국영수단기마스터';

UPDATE curriculum
SET BOOK = REPLACE(BOOK, '국어,', '국어, 영어,')
WHERE COURSE_NAME = '국영수단기마스터';

SELECT CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK, REGEXP_COUNT(BOOK, ',') + 1 교재수
FROM curriculum;

INSERT INTO Curriculum
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK)
VALUES('D', '수학뽀개기', 4, 8, 480000, '수학');


----------------------------1NF------------------------------------------------
CREATE TABLE Curriculum2(
    CODE VARCHAR2(5),
    COURSE_NAME VARCHAR2(100),
    period NUMBER(3),
    LECTURE_TIME NUMBER(3),
    TUITION_FEE NUMBER(8),
    BOOK1 VARCHAR2(100),
    BOOK2 VARCHAR2(100),
    BOOK3 VARCHAR2(100)
);

INSERT INTO Curriculum2
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK1, BOOK2, BOOK3)
VALUES('a', '국영수단기마스터', 2, 3, 500000, '국어', '영어', '수학');

INSERT INTO Curriculum2
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK1, BOOK2, BOOK3)
VALUES('b', 'IT완전정복', 3, 3, 480000, 'C', 'Python', 'Java');

UPDATE curriculum2
SET BOOK2 = '회화'
WHERE COURSE_NAME = '국영수단기마스터';

UPDATE curriculum2
SET BOOK2 = 'Py'
WHERE COURSE_NAME = 'IT완전정복';

UPDATE curriculum2
SET BOOK3 = 'Javascript'
WHERE COURSE_NAME = 'IT완전정복';

UPDATE curriculum2
SET BOOK3 = NULL
WHERE COURSE_NAME = '국영수단기마스터';

UPDATE curriculum2
SET BOOK2 = '회화'
WHERE COURSE_NAME = '국영수단기마스터';

INSERT INTO Curriculum2
VALUE(CODE, COURSE_NAME, period, LECTURE_TIME, TUITION_FEE, BOOK1)
VALUES('d', '수학뽀개기', 4, 8, 480000, '수학');

ALTER TABLE CURRICULUM2 ADD BOOK4 VARCHAR2(100);

UPDATE curriculum2
SET BOOK4 = 'Spring'
WHERE COURSE_NAME = 'IT완전정복';

SELECT *
FROM CURRICULUM2
WHERE BOOK1 = '수학'
OR BOOK2 = '수학'
OR BOOK3 = '수학'
OR BOOK4 = '수학';

SELECT *
FROM CURRICULUM2;

---------------------------CREATE TABLE------------------------------------------
CREATE TABLE COURSE(
    CCODE VARCHAR2(100) PRIMARY KEY,
    CNAME VARCHAR2(100),
    CTERM NUMBER,
    CTIME NUMBER,
    CFEE NUMBER
);

CREATE TABLE BOOK(
    BNAME VARCHAR2(100) PRIMARY KEY,
    BPRICE NUMBER
);

CREATE TABLE COURSE_BOOK(
    CCODE VARCHAR2(100),
    BNAME VARCHAR2(100)
);

ALTER TABLE COURSE_BOOK 
ADD CONSTRAINT COURSE_COURSE_BOOK_CCODE FOREIGN KEY(CCODE) REFERENCES COURSE(CCODE);

ALTER TABLE COURSE_BOOK
ADD CONSTRAINT BOOK_COURSE_BOOK_BNAME FOREIGN KEY(BNAME) REFERENCES BOOK(BNAME);
-------------------------INSERT VALUE----------------------------------------
SELECT * 
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'COURSE_BOOK'
OR TABLE_NAME = 'COURSE'
OR TABLE_NAME = 'BOOK';

INSERT INTO COURSE
VALUE(CCODE, CNAME, CTERM, CTIME, CFEE)
VALUES('a', '국영수단기마스터', 2, 3, 500000);

INSERT INTO COURSE
VALUE(CCODE, CNAME, CTERM, CTIME, CFEE)
VALUES('b', 'IT완전정복', 3, 3, 480000);

INSERT INTO COURSE
VALUE(CCODE, CNAME, CTERM, CTIME, CFEE)
VALUES('c', '국영수단기마스터-B', 5, 8, 660000);

INSERT INTO COURSE
VALUE(CCODE, CNAME, CTERM, CTIME, CFEE)
VALUES('d', '수학뽀개기', 4, 8, 480000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('국어', 1000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('영어', 2000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('수학', 3000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('C', 4000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('Python', 5000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('Java', 6000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('회화', 7000);

INSERT INTO BOOK
VALUE(BNAME, BPRICE)
VALUES('국사', 8000);

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('a', '국어');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('a', '영어');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('a', '수학');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('b', 'C');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('b', 'Java');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('b', 'Python');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('c', '국어');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('c', '회화');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('c', '수학');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('c', '국사');

INSERT INTO COURSE_BOOK
VALUE(CCODE, BNAME)
VALUES('d', '수학');


SELECT X.CCODE, X.CNAME, X.CTERM, X.CTIME, X.CFEE, Y.BNAME, Z.BPRICE
FROM COURSE X
JOIN COURSE_BOOK Y
ON X.CCODE = Y.CCODE

JOIN BOOK Z
ON Y.BNAME = Z.BNAME
ORDER BY CCODE, BPRICE;

SELECT C.NAME, C.TIME
FROM COURSE C INNER JOIN COURSE_BOOK B
ON C.CODE = B.CODE
GROUP BY C.COURSE_NAME, C.COURSE_TIME
HAVING C.COURSE_TIME >= 5;

COMMIT;

ROLLBACK;